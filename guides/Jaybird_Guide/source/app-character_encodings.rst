.. raw:: latex

  \appcount

Кодировка символов
===========================

Типы кодировок
-------------------

``Firebird`` использует кодировки символов в двух разных местах:

* Кодировка базы данных определяет набор символов, в котором поля ``CHAR``, ``VARCHAR`` и ``BLOB TEXT`` физически хранятся на диске. Существует кодировка базы данных по умолчанию, которая задается при создании базы данных. Также можно указать наборы символов для каждого столбца. 
* Кодировка клиентского соединения определяет набор символов, в котором клиент будет отправлять и ожидать получения символьных данных. Она может совпадать или не совпадать с кодировкой базы данных по умолчанию.

``Firebird`` выполняет перевод между наборами символов клиентского соединения и наборами символов содержимого. 
Список разрешенных наборов символов, а также допустимые переводы между ними указаны в общей библиотеке ``fbintl``, расположенной в каталоге ``intl/`` инсталляции ``Firebird``. 
Существует также специальный набор символов ``NONE``, который указывает ``Firebird`` не интерпретировать содержимое символьного поля.

При выполнении переводов ``Firebird`` использует следующий алгоритм:

* Если исходный и целевой наборы символов совпадают, отправляется содержимое без изменений.
* Если целевой набор символов ``NONE``, отправляется содержимое без изменений.
* Если исходный набор символов ``NONE``, отправляется содержимое без изменений.
* Если существует правило прямого перевода между исходным и целевым наборами символов, используется это правило.
* Если правила прямого перевода нет, проверяется, существует ли правило перевода исходного набора символов в набор символов ``UTF8`` и правило перевода из ``UTF8`` в целевой набор символов. Если да, используются эти правила для перевода.
* Если подходящее правило перевода не найдено, будет вызвано исключение.

Кодировки в Java
--------------------

Язык программирования ``Java`` основан на наборе символов ``Unicode`` и использует кодировку ``UTF-16``, в которой каждый символ представлен одной или двумя 16-битными единицами. 
``Firebird`` не основан на ``Unicode`` и позволяет назначать различные наборы символов для разных объектов базы данных. 
``Firebird`` требует указания набора символов для соединения, что заставляет его преобразовывать данные из набора символов объекта базы данных в набор символов клиентского приложения.

Набор символов ``UTF8`` - это набор символов ``Unicode``, использующий кодировку ``UTF-8`` и занимающий от одной до четырех 8-битных единиц. 
``Firebird`` поддерживает набор символов ``Unicode`` уже долгое время. 

Набор символов UTF8
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для использования символов ``Unicode`` в базе данных и приложении необходимо обеспечить две вещи:

1. Объекты базы данных должны быть определены с набором символов ``UTF8``. Это можно сделать, создав базу данных с набором символов ``UTF8`` по умолчанию или добавив предложение ``CHARACTER SET UTF8`` в определения столбцов или доменов.
2. Свойство соединения ``encoding`` в драйвере ``JDBC`` должно быть установлено в ``UTF8``; это можно сделать несколькими способами: самый простой - добавить соответствующий параметр в ``JDBC URL``, другой вариант - использовать соответствующий метод класса ``DriverManager``. Приложения, использующие интерфейс ``DataSource`` для получения соединений с базой данных, также имеют доступ к свойству ``encoding``.


Определение кодировки соединения в ``URL JDBC``:

.. code-block::

    Connection connection = DriverManager.getConnection(
        "jdbc:firebirdsql:localhost/3050:employee?encoding=UTF8",
        "SYSDBA", "masterkey");

Определение кодировки соединения в свойствах соединения:

.. code-block::

    Properties props = new Properties();

    props.setProperty("user", "SYSDBA");
    props.setProperty("password", "masterkey");
    props.setProperty("encoding", "UTF8");

    Connection connection = DriverManager.getConnection(
        "jdbc:firebirdsql:localhost/3050:employee", props);

Есть несколько ограничений, связанных с использованием набора символов ``UTF8``:

* Невозможно создать столбцы ``Unicode`` длиннее 8191 символа ``Unicode``. Самый длинный возможный столбец ``VARCHAR`` может занимать 32765 байт (32767 для столбцов ``CHAR``), а один символ ``UTF8`` может занимать до четырех байт.
* Невозможно индексировать колонки ``Unicode`` длиннее 1023 символов - или 2047 символов в ``Firebird 4.0`` с размером страницы 32 килобайта; это ограничение вызвано тем, что самый длинный индексный ключ не может быть длиннее четверти страницы базы данных, которая имеет максимум 16Кб (в ``Firebird 4.0`` 32Кб), а также тем, что каждый символ ``UTF8`` может занимать до четырех байт.

Использование набора символов ``Unicode`` может привести к заметному снижению производительности при доступе к базе данных через глобальные сети. 
В основном это касается тех случаев, когда в базе данных хранятся нелатинские символы, поскольку для их хранения потребуется два или более байта, 
что может привести к дополнительным обходам сервера для получения данных.

Набор символов NONE
~~~~~~~~~~~~~~~~~~~~~~~~~

``Java`` создает дополнительные сложности при использовании набора символов ``NONE``. 
Причина в том, что ``Java`` внутренне хранит все строки в формате ``Unicode``, и приложение должно определить кодировку символов для содержимого байтов в ``JVM``. 
Когда используется набор символов ``NONE``, ``Jaybird`` не знает, как интерпретировать полученные данные. 
Единственный выбор, который остается у ``Jaybird``, - это построить строку, используя набор символов по умолчанию ``JVM``, 
который обычно соответствует региональным настройкам операционной системы и может быть доступен из ``JVM`` через системное свойство ``file.encoding``.

При использовании для соединения набора символов ``NONE`` ``Jaybird`` использует для преобразования явный набор символов столбцов ``CHAR``, ``VARCHAR`` и ``BLOB TEXT``. 

Преобразование с использованием набора символов по умолчанию, происходящее внутри JVM, может привести к ошибкам, 
когда к одному и тому же содержимому обращаются с двух или более разных виртуальных машин Java, имеющих различную конфигурацию.

Если все клиентские приложения работают на одной ОС с одинаковыми региональными настройками, 
в большинстве случаев это не приведет к серьезным последствиям, за исключением, возможно, неправильного порядка сортировки или верхнего регистра на стороне сервера.

На ``Linux`` и других платформах ``Unix`` это может привести к более серьезным последствиям, 
поскольку часто региональные настройки не указаны и используется локаль ``«C»`` по умолчанию, 
а символы, не относящиеся к ``ASCII``, заменяются вопросительными знаками (``«?»``).


Поэтому приложение должно использовать кодировку ``NONE`` для базы данных и соединения только в том случае, если выполняется хотя бы одно из следующих условий:
* База данных содержит только символы ``ASCII``.
* Все виртуальные машины ``Java``, обращающиеся к базе данных, имеют одну и ту же кодировку по умолчанию, которая корректно обрабатывает все символы, хранящиеся в базе данных.
* Все столбцы имеют явный набор символов. Если столбцы имеют явный набор символов (отличный от ``NONE``) и используется набор символов ``NONE`` для соединения, ``Firebird`` отправит идентификатор набора символов каждого столбца, и ``Jaybird`` будет использовать этот набор символов для преобразования.

В качестве дополнительного решения можно указать кодировку, которая должна использоваться для интерпретации байтов, поступающих с сервера, в свойстве ``charSet`` соединения. 
При интерпретации свойств ``encoding`` и ``charSet`` используются следующие правила:

* Если указано только свойство ``encoding``, ``Jaybird`` использует стандартное сопоставление между кодировками сервера и ``Java``. Если свойство ``encoding`` не задано или задано ``NONE``, а свойство ``charSet`` не задано, для интерпретации байтов, поступающих с сервера, используется кодировка ``JVM`` по умолчанию.
* Если указано только свойство ``charSet``, ``Jaybird`` использует обратное сопоставление для определения кодировки соединения для сервера и интерпретирует поток байтов в соответствии со значением свойства.
* Если указаны и кодировка, и свойство ``charSet``, ``Jaybird`` устанавливает кодировку соединения в соответствии со значением свойства ``encoding``, но интерпретирует поток байтов в соответствии со свойством ``charSet``. В ``Jaybird 3`` и выше эта опция имеет ограничения, если кодировка ``NONE``: преобразование с использованием ``charSet`` будет применяться только для столбцов, у которых нет явного набора символов, в противном случае для преобразования будет использоваться явный набор символов.

Доступные кодировки
-----------------------

В таблице ниже перечислены кодировки символов, доступные в стандартном дистрибутиве ``Firebird``, и их сопоставление с кодировками ``Java``:

.. tabularcolumns:: |>{\ttfamily\arraybackslash}\X{3}{13}|>{\ttfamily\arraybackslash}\X{3}{13}|>{\ttfamily\arraybackslash}\X{2}{13}|>{\ttfamily\arraybackslash}\X{5}{13}|
.. list-table::
   :class: longtable
   :header-rows: 1

   * - Кодировка Firebird (свойство encoding) 
     - Кодировка Java (свойство charSet)
     - Размер в байтах
     - Комментарий
   * - NONE
     -  
     - 1
     - Необработанные байты, интерпретация содержимого невозможна.
   * - ASCII
     - ASCII
     - 1
     - 
   * - BIG_5
     - Big5
     - 2
     - Traditional Chinese
   * - DOS437
     - Cp437
     - 1
     - MS-DOS: United States, Australia, New Zeland, South Africa
   * - DOS737
     - Cp737
     - 1
     - MS-DOS: Greek
   * - DOS775
     - Cp775
     - 1
     - MS-DOS: Baltic
   * - DOS850
     - Cp850
     - 1
     - MS-DOS: Latin-1
   * - DOS852
     - Cp852
     - 1
     - MS-DOS: Latin-2
   * - DOS857
     - Cp857
     - 1
     - IBM: Turkish
   * - DOS858
     - Cp858
     - 1
     - IBM: Latin-1 + Euro
   * - DOS860
     - Cp860
     - 1
     - MS-DOS: Portuguese
   * - DOS861
     - Cp861
     - 1
     - MS-DOS: Icelandic
   * - DOS862
     - Cp862
     - 1
     - IBM: Hebrew
   * - DOS863
     - Cp863
     - 1
     - MS-DOS: Canadian French
   * - DOS864
     - Cp864
     - 1
     - IBM: Arabic
   * - DOS865
     - Cp865
     - 1
     - MS-DOS: Nordic
   * - DOS866
     - Cp866
     - 1
     - IBM: Cyrillic
   * - DOS869
     - Cp869
     - 1
     - IBM: Modern Greek
   * - EUCJ_0208
     - EUC_JP
     - 2
     - JIS X 0201, 0208, 0212, EUC encoding, Japanese
   * - GB_2312
     - EUC_CN
     - 2
     - GB2312, EUC encoding, Simplified Chinese
   * - ISO8859_1
     - ISO-8859-1
     - 1
     - ISO 8859-1, Latin alphabet No. 1
   * - ISO8859_2
     - ISO-8859-2
     - 1
     - ISO 8859-2
   * - ISO8859_3
     - ISO-8859-3
     - 1
     - ISO 8859-3
   * - ISO8859_4
     - ISO-8859-4
     - 1
     - ISO 8859-4
   * - ISO8859_5
     - ISO-8859-5
     - 1
     - ISO 8859-5
   * - ISO8859_6
     - ISO-8859-6
     - 1
     - ISO 8859-6
   * - ISO8859_7
     - ISO-8859-7
     - 1
     - ISO 8859-7
   * - ISO8859_8
     - ISO-8859-8
     - 1
     - ISO 8859-8
   * - ISO8859_9
     - ISO-8859-9
     - 1
     - ISO 8859-9
   * - ISO8859_13
     - ISO-8859-13
     - 1
     - ISO 8859-13
   * - KSC_5601
     - MS949
     - 2
     - Windows Korean
   * - UNICODE_FSS
     - UTF-8
     - 3
     - 8-bit Unicode Transformation Format (объявлено устаревшим в Firebird 2.0)
   * - UTF8
     - UTF-8
     - 4
     - 8-bit Unicode Transformation Format (Firebird 2.0+)
   * - WIN1250
     - Cp1250
     - 1
     - Windows Eastern European
   * - WIN1251
     - Cp1251
     - 1
     - Windows Cyrillic
   * - WIN1252
     - Cp1252
     - 1
     - Windows Latin-1
   * - WIN1253
     - Cp1253
     - 1
     - Windows Greek
   * - WIN1254
     - Cp1254
     - 1
     - Windows Turkish
   * - WIN1255
     - Cp1255
     - 1
     - Windows Hebrew
   * - WIN1256
     - Cp1256
     - 1
     - Windows Arabic
   * - WIN1257
     - Cp1257
     - 1
     - Windows Baltic



 

