Информация для подключения
============================

Плагины аутентификации
------------------------

В ``Firebird 3.0`` появились плагины аутентификации, а также новая модель аутентификации.
По умолчанию ``Firebird 3.0`` использует плагин аутентификации ``Srp`` (``Secure remote password``).
Он также включает плагины ``Legacy_Auth``, поддерживающий механизм аутентификации, существовавший до ``Firebird 3``.
``Firebird 3.0.4`` использует ``Srp256``. В ``Firebird 4.0`` появились плагины ``Srp224``, ``Srp384`` и ``Srp512``.

Оригинальный плагин ``Srp`` использует ``SHA-1``, новые варианты используют ``SHA-224``, ``SHA-256``, ``SHA-384`` и ``SHA-512`` соответственно.

Поддержка этих плагинов зависит от поддержки этих алгоритмов хеширования в ``JVM``.

Плагины аутентификации по умолчанию
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. rubric:: Jaybird 5

По умолчанию ``Jaybird 5`` использует плагины ``Srp256`` и ``Srp``.
Это относится только к чистому протоколу ``Java`` и только при подключении к ``Firebird 3.0`` или выше.
Собственная реализация будет использовать собственное значение по умолчанию или значение, настроенное в файле ``firebird.conf``.

При подключении к ``Firebird 3.0`` или выше, протокол чистой ``Java`` в ``Jaybird 4`` и выше больше не будет использовать плагин ``Legacy_Auth`` по умолчанию,
так как это небезопасный механизм аутентификации.
Рекомендуется использовать только ``Srp``, но если необходимо использовать унаследованную аутентификацию, нужно указать свойство подключения ``authPlugins=Legacy_Auth``.

При подключении к ``Firebird 3.0`` не с ``Srp256`` аутентификация может быть более медленной.
После неудачной попытки использовать ``Srp256`` аутентификация продолжится с помощью ``Srp``.

Чтобы избежать этого, явно настройте плагины аутентификации. Firebird 2.5 и более ранние версии всегда будут использовать плагин ``Legacy_Auth``.

.. rubric:: Jaybird 4

По умолчанию ``Jaybird 4`` использует плагины ``Srp256`` и ``Srp``.

.. rubric:: Jaybird 3

``Jaybird 3`` будет пытаться использовать ``Srp256``, ``Srp`` и ``Legacy_Auth``. В ``Jaybird 3`` невозможно указать другие настройки.

``Firebird 2.5`` и более ранние версии всегда будут использовать ``legacy`` аутентификацию.

Настройка плагинов аутентификации
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Параметр ``authPlugins`` (псевдоним ``auth_plugin_list``) указывает на плагины аутентификации, которые необходимо использовать при подключении.
Значение этого свойства представляет собой список с именами плагинов, разделенный запятыми.

.. note::

	Значения ``authPlugins`` могут быть разделены запятой, пробелом, табуляцией или точкой с запятой. Рекомендуется использовать запятую в качестве разделителя. Точка с запятой не должна использоваться в ``URL JDBC``, поскольку там точка с запятой является разделителем между свойствами соединения.

Неизвестные или неподдерживаемые плагины будут регистрироваться и пропускаться. Если ни один из известных плагинов не указан, ``Jaybird`` выбросит исключение:

* Для чистой ``Java``:

	``Cannot authenticate. No known authentication plugins, requested plugins: [<plugin-names>] [SQLState:28000, ISC error code:337248287]``

* Для ``native``:

	``Error occurred during login, please check server firebird.log for details [SQLState:08006, ISC error code:335545106]``

Параметр ``authPlugins`` учитывается только при подключении к ``Firebird 3.0`` и выше.
Он будет игнорироваться при подключении к ``Firebird 2.5`` или более ранней версии.
Параметр также будет игнорироваться для ``native`` соединений при использовании библиотеки ``fbclient 2.5`` или ниже.

Примеры:

* ``URL JDBC`` с использованием только ``Srp256``:

	.. code-block::

		jdbc:firebirdsql://localhost/employee?authPlugins=Srp256

* ``URL JDBC`` с использованием только ``Legacy_Auth`` (это небезопасно!):

	.. code-block::

		jdbc:firebirdsql://localhost/employee?authPlugins=Legacy_Auth

* ``JDBC URL`` с использованием ``Legacy_Auth`` перед ``Srp512`` (такой порядок небезопасен!):

	.. code-block::

		jdbc:firebirdsql://localhost/employee?authPlugins=Legacy_Auth,Srp512

Этот параметр также поддерживается источниками данных, менеджерами сервисов и менеджерами событий.

Поддержка внешних плагинов аутентификации (экспериментально)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Собственный плагин аутентификации можно добавить только при использовании чистой ``Java``, реализовав интерфейсы:

* ``org.firebirdsql.gds.ng.wire.auth.AuthenticationPluginSpi``
* ``org.firebirdsql.gds.ng.wire.auth.AuthenticationPlugin``

Реализация ``SPI`` должна быть указана в ``META`` - ``INF/services/org.firebirdsql.gds.ng.wire.auth.AuthenticationPluginSpi in your jar``.

Эта возможность является экспериментальной и имеет ряд недостатков:

* Она не тестировалась в полном объеме (за исключением загрузки собственных плагинов ``Jaybird``).
* Интерфейсы плагинов аутентификации (и провайдеров) следует рассматривать как нестабильные; они могут измениться в следующих версиях.
* Необходимо, чтобы ``jar``, содержащий плагин аутентификации, загружался тем же загрузчиком классов, что и сам ``Jaybird``.

Поддержка шифрования сетевого трафика
-----------------------------------------

``Firebird 3.0`` и выше поддерживает шифрование данных, передаваемых по сети.
Это шифрование настраивается с помощью параметра соединения ``wireCrypt`` со следующими возможными значениями (без учета регистра):

* ``DEFAULT`` - Значение по умолчанию, используемое, когда ``wireCrypt`` не указан.
* ``ENABLED`` - Шифрование включено, но не требуется.
* ``REQUIRED`` - Требуется шифрование (в ``Firebird 3.0`` или выше).
* ``DISABLED`` - Шифрование отключено.

При исмользовании чистой ``Java`` значением по умолчанию будет ``ENABLED``.
При исмользовании ``JNA`` значение по умолчанию будет взято ``fbclient`` (либо ``Enabled``, либо значение ``WireCrypt`` из ``firebird.conf``).

Значение ``wireCrypt=REQUIRED`` не будет отклонять незашифрованные соединения при подключении к ``Firebird 2.5`` или ниже.
Такое поведение совпадает с работой клиентской библиотеки ``Firebird 3.0``.
Значение будет игнорироваться при использовании ``native`` соединений с клиентской библиотекой ``Firebird 2.5``.

Использование ``wireCrypt=DISABLED``, когда для ``Firebird 3.0`` или выше указано ``WireCrypt = Required`` (или наоборот), приведет к ошибке:
``"Incompatible wire encryption levels requested on client and server" (error: isc_wirecrypt_incompatible / 335545064)."``

Такая же ошибка возникает при подключении к ``Firebird 3.0`` и выше  с ``legacy`` аутентификацией и параметром ``wireCrypt=REQUIRED``.

Сжатие сетевого трафика
--------------------------

``Jaybird`` поддерживает сжатие сетевого трафика ``zlib`` при использовании чистого протокола ``Java``.
Сжатие можно включить с помощью параметра ``wireCompression``.

Нативные соединения будут использовать значение параметра ``WireCompression``, указанное в  ``firebird.conf``.

По умолчанию сжатие отключено. Это может измениться в следующих версиях ``Jaybird``.

Свойство ``wireCompression`` доступно для источников данных и управляющих классов в ``org.firebirdsql.management``.

Шифрование базы данных
------------------------

В ``Jaybird 3.0.4`` добавлена поддержка обратных вызовов шифрования базы данных ``Firebird 3.0`` при использовании чистой Java-реализации протокола версии 13.

Текущая реализация проста и поддерживает только ответ со статическим значением из свойства соединения.
Статическое значениее для шифрования базы данных не очень безопасно, так как может привести к атакам повторного воспроизведения или непреднамеренному раскрытию ключа.

В следующих версиях ``Jaybird`` может появиться поддержка плагинов для шифрования баз данных, которые потребуют более сложного обратного вызова.

Значение статического ответа обратного вызова шифрования может быть установлено через свойство соединения ``dbCryptConfig``.
Источники данных и ``ServiceManager`` имеют аналогичное свойство с тем же именем. Это свойство можно настроить следующим образом:

* Отсутствующее или пустое значение - Пустой ответ на обратный вызов (в зависимости от плагина шифрования базы данных это может сработать и привести к ошибке в дальнейшем).
* Строки с префиксом ``base64:`` - Остальная часть строки декодируется как base64 в байты. Если присутствуют подстановочные символы, то они должны быть корректными.
* Строки с префиксом ``base64url:`` - остальная часть строки декодируется как ``base64url`` в байты (с использованием алфавита ``«Base 64 URL and Filename safe»``).
* Обычная строка - строка кодируется в байты с использованием ``UTF-8``, эти байты используются в качестве ответа.

В связи с ограничением обработки ``URL-адресов`` при подключении рекомендуется избегать использования строковых значений с ``&`` или ``;``.
Также следует избегать ``:``, чтобы в будущем можно было использовать другие префиксы, подобные ``base64:`` и ``base64url:``.
Если эти символы необходимы, используйте вместо них значение в кодировке ``base64``.

``Jaybird 3.0.9`` и выше ожидает, что ключи и значения в ``URL JDBC`` будут в кодировке ``URL``.
Если значение в кодировке ``base64`` содержит ``+``, в ``JDBC URL`` оно должно быть экранировано как ``%2B``,
иначе оно будет декодировано в пробел и декодирование завершится с ошибкой.
В ``Jaybird 5`` появился ``base64url``, альтернатива ``base64``, в которой не используется ``+``, что избавляет от необходимости использовать экранирование.

Для сервисных операций, реализованных в пакете ``org.firebirdsql.management``, требуется,
чтобы параметр ``KeyHolderPlugin`` был глобально определен в файле ``firebird.conf``.
Конфигурация конкретной базы данных ``databases.conf`` будет игнорироваться при выполнении сервисных операций.
Некоторые сервисные операции над зашифрованными базами данных не поддерживаются ``Firebird 3.0`` (например, аналоги ``gstat``, отличные от ``gstat -h`` или ``gstat -e``).

Удерживаемые наборы результатов по умолчанию
-------------------------------------------------

Это свойство соединения позволяет по умолчанию создавать удерживаемые наборы результатов.
Это свойство можно использовать в качестве обходного пути для приложений, которые ожидают, что результат останется открытым после фиксации,
или имеют ожидания относительно наборов результатов в режиме автоматической фиксации, которые не соответствуют спецификации ``JDBC``.

Такие приложения открывают набор результатов и, обходя его, выполняют другие операторы, используя то же самое соединение.
Согласно спецификации ``JDBC``, набор результатов должен быть закрыт, если в режиме автокоммита по тому же соединению выполняется другой оператор.

При установленном по умолчанию удержании набора результатов закрытие при фиксации это приводит к ``SQLException`` с сообщением ``«The result set is closed»``.

Вызывается свойство:

* ``defaultResultSetHoldable`` как свойство соединения без значения, с пустым значением или ``true`` (псевдонимы: ``defaultHoldable`` и ``result_set_holdable``);
* ``isc_dpb_result_set_holdable`` как элемент ``DPB``;
* Методы интерфейса ``FirebirdConnectionProperties`` ``isDefaultResultSetHoldable()`` и ``setDefaultResultSetHoldable(boolean)``.

Каждый удерживаемый набор результатов будет полностью кэшироваться в памяти.
Память, занимаемая этим набором результатов, будет освобождена при закрытии результата, завершении или повторном выполнении оператора, создавшего этот набор результатов.

Режим автоматической фиксации Firebird (экспериментальный)
-----------------------------------------------------------------

.. warning::

	Этот функционал является экспериментальным и будет оставаться таковым, пока ``Firebird`` не изменит работу режима автокоммита.
	Не используйте его, если вы не знаете, что делаете.
	Неправильное использование может привести к чрезмерному росту базы данных из-за увеличения цепочек обратных версий, что приведёт к снижению производительности.
	При использовании с уровнем изоляции, отличным от ``READ COMMITTED``, соединение будет видеть только изменения, зафиксированные в момент старта первой транзакции;
	из-за наличия механизма автокоммита новые зафиксированные изменения не будут видны.

Эта опция включается при указании параметра подключения ``useFirebirdAutocommit=true``.

С помощью этой опции ``Jaybird`` настроит транзакцию на использование ``isc_tpb_autocommit`` с ``autoCommit=true``.
Это означает, что сервер ``Firebird`` будет внутренне фиксировать транзакцию после завершения каждого оператора.
Сам ``Jaybird`` не будет фиксировать транзакцию до закрытия соединения (или переключения на ``autoCommit=false``).
Исключением является случай, когда оператор имеет тип ``isc_info_sql_stmt_ddl``,
в этом случае ``Jaybird`` будет фиксировать при успешном завершении оператора и откатываться при неудачном завершении
(точно так же, как он делает для всех операторов в обычном режиме автоматической фиксации).
``Firebird`` для некоторых ``DDL-команд`` выполняет их при явном вызове фиксации, и полагаться на автокоммит ``Firebird`` недостаточно.

При завершении оператора результаты закрываются, если они не удерживаются при фиксации.
Результирующий набор закрывается только на стороне клиента, курсор остается открытым на стороне сервера для предотвращения обхода.
Если в коде он не закрыт явно, это может привести к дополнительному потреблению ресурсов на стороне сервера.
Любые блобы будут закрыты как на стороне клиента, так и на стороне сервера.


Можно проверить использует ли соединение ``isc_tpb_autocommit`` с помощью ``FirebirdConnection.isUseFirebirdAutocommit()``.

Если вы вручную добавили ``isc_tpb_autocommit`` в буфер параметров транзакции и включили опцию ``useFirebirdAutocommit=true``,
то ``isc_tpb_autocommit`` будет удален из ``TPB``, если ``autoCommit=false``.

Информация о процессе
------------------------

В ``Firebird 2.1`` появилась таблица ``MON$ATTACHMENTS``. Она содержит столбцы ``MON$REMOTE_PID`` и ``MON$REMOTE_PROCESS``,
которые хранят информацию об идентификаторе процесса и имени связанного с ним процесса.

Начиная с ``Jaybird 6``, чисто ``Java-соединения`` по умолчанию будут предоставлять фактический идентификатор процесса, как и нативные соединения.
Имя процесса по умолчанию не предоставляется, так как в большинстве случаев имя процесса - это ``"java"`` (или что-то подобное), что не очень полезно.
Когда установлен ``SecurityManager``, вся цепочка вызовов должна иметь разрешение ``RuntimePermission(«manageProcess»)``
для получения идентификатора процесса в чисто ``Java-соединениях``.
Если это разрешения не уcтановлено, ``Jaybird`` не определит ``isc_dpb_process_id`` на основе фактического идентификатора процесса.

Начиная с версии ``Firebird 3.0``, таблица ``MON$ATTACHMENTS`` также включает столбец ``MON$CLIENT_VERSION``.
``Jaybird`` будет сообщать свою полную версию (например, ``Jaybird 3.0.5-JDK_1.8``).

Имя процесса возвращается из ``Connection.getClientInfo(«ApplicationName»)``, если свойство
``ApplicationName`` не установлено явно с помощью ``Connection.setClientInfo``, и/или если в контексте ``USER_SESSION`` нет свойства ``ApplicationName``.

.. warning::

	Не используйте информацию об имени процесса и его идентификаторе для решения вопросов безопасности. Рассматривайте их только как информационные, так как клиент может передать ложную информацию.

Нативные соединения всегда будут передавать фактический идентификатор процесса, если используется ``fbclient`` версии ``Firebird 2.1`` или выше.
Это нельзя изменить с помощью приведенных ниже опций.

Указать имя процесса и его идентификатор можно двумя способами.

Системные свойства для получения информации о процессе
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Можно определить информацию о процессе через системные свойства ``Java``:

* ``org.firebirdsql.jdbc.pid`` - Идентификатор процесса;
* ``org.firebirdsql.jdbc.processName`` - Имя процесса.

В ``Jaybird 5`` и более ранних версиях этот способ предпочтительнее, поскольку свойство нужно указать только один раз.
Для ``Jaybird 6`` и более поздних версий предпочтительнее не задавать никаких параметров и использовать фактический идентификатор процесса.

Свойства соединения для получения информации о процессе
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Можно определить информацию о процессе через свойства соединения:

* ``processId`` - Идентификатор процесса (псевдоним: ``process_id``). Это свойство игнорируется для нативных соединений, которые сообщают фактический идентификатор процесса.
* ``processName`` - Имя процесса (псевдоним: ``process_name``, ``ApplicationName``, ``applicationName``).

Начиная с ``Jaybird 5``, эти свойства доступны для источников данных.
Для установки свойств для источников данных в ``Jaybird 4`` или более ранних версиях используйте ``setNonStandardProperty``.

Поддержка приведения типов данных
------------------------------------

В ``Firebird 4.0`` появился оператор ``SET BIND`` и элемент ``isc_dpb_set_bind DPB``.
Они позволяют указывать правила преобразования типов данных для совместимости или упрощения обработки данных.

Эта функция необходима для использования типов ``WITH TIME ZONE`` в ``Jaybird 3`` или ``Jaybird 4`` на ``Java 7``.

В ``Jaybird`` эта функция доступна как свойство соединения ``dataTypeBind`` (псевдоним ``set_bind``).
Значение свойства - это список правил приведения типов данных, разделенный точкой с запятой.

Правила приведения имеет вид ``<от типа>`` к ``<к типу>``, то же самое, что и вторая часть оператора ``SET BIND``.
Неверные значения или несопоставимые приведения вызовут ошибку при подключении.

При использовании ``dataTypeBind`` в ``JDBC URL`` точки с запятой в списке должны быть экранированы как ``%3B``,
так как точки с запятой в ``JDBC URL`` могут использоваться в качестве разделителя между свойствами.

``JDBC URL`` с использованием ``dataTypeBind``:

.. code-block::

	String jdbcUrl = "jdbc:firebirdsql://localhost/database?charSet=utf-8" + "&dataTypeBind=decfloat to varchar%3Btimestamp with time zone to legacy"

Если свойство задается через объект ``Properties`` или ``DataSource``, кодировать точку с запятой не нужно, это приведет к ошибке.

Объект ``Properties`` с ``dataTypeBind``:

.. code-block::

	Properties props = new Properties();
	props.setProperty("dataTypeBind", "decfloat to varchar;timestamp with time zone to legacy")

Значения, установленные через это свойство соединения, будут использоваться в качестве настройки по умолчанию для сеанса,
то есть они будут сохранены при выполнении ``ALTER SESSION RESET``.

Включение неподдерживаемых версий протокола
------------------------------------------------

Начиная с ``Jaybird 6``, чистая реализация протокола ``Java`` больше не будет пытаться соединиться с протоколами версий ``Firebird``, которые не поддерживаются.
Поскольку минимальная поддерживаемая версия ``Firebird`` в ``Jaybird 6`` - ``Firebird 3.0``, версии протокола 10, 11 и 12 больше не будут пытаться подключиться по умолчанию.
Версии протокола выше 18 (``Firebird 5.0.0``) также не будут пытаться подключиться (при условии, что реализация протокола с таким номером версии существует в ``classpath``).

Свойство соединения ``enableProtocol`` может включать неподдерживаемые протоколы, если в ``classpath`` имеется подходящая реализация протокола.

Свойство ``enableProtocol`` может иметь следующие значения:

* Список дополнительных версий протокола, с которыми нужно попытаться соединиться, разделенный запятыми (например, «11,12»). Перечисленные версии будут проверяться в дополнение к поддерживаемым версиям протоколов. Нецелые значения или неизвестные версии протоколов игнорируются.
* ``*`` - включить все доступные версии протокола.
* ``null`` или пустая строка - поведение по умолчанию, используются только поддерживаемые протоколы.

.. warning::

	Учитывая, что эти версии протоколов и их версии ``Firebird`` не поддерживаются, нет никакой гарантии, что драйвер будет работать правильно,
	когда неподдерживаемый протокол включен таким образом. Метаданные базы данных, могут использовать функции, которые не поддерживаются старыми версиями ``Firebird``.
	Рекомендуется обновить версию ``Firebird`` или перейти на соответствующую версию ``Jaybird``.

	Для максимальной совместимости рекомендуется либо использовать ``*``, либо указывать максимальную версию протокола для установленной версии ``Firebird``.

	Включение неподдерживаемых версий протокола можеь быть удалено в следующих версиях ``Jaybird``.

.. tabularcolumns:: |>{\ttfamily\arraybackslash}\X{6}{14}|>{\ttfamily\arraybackslash}\X{8}{14}|
.. list-table:: Соответствие версий протоколов версиям Firebird
   :class: longtable
   :header-rows: 1

   * - Версия Firebird
     - Протокол
   * - 1.0 - 2.0
     - 10
   * - 2.1
     - 11
   * - 2.5
     - 12
   * - 3.0
     - 15
   * - 4.0
     - 16
   * - 5.0
     - 18

Встроенные функции для получения информации о пакетах в DatabaseMetaData
------------------------------------------------------------------------------

В ``Firebird 3.0`` добавлены пакеты, которые могут содержать хранимые процедуры и функции.
``JDBC API`` не предоставляет способа доступа к информации о пакетах или процедурах, определенных в пакетах.
В ``Jaybird`` добавлена функция, которая обеспечивает доступ через обычные методы метаданных, используя ``«каталог»`` для создания отчетов о пакетах.

Для включения функции нужно установить свойство соединения ``useCatalogAsPackage = true``.
При этом поведение ``DatabaseMetaData`` этого соединения изменится следующим образом:

* ``getCatalogs()`` - выводит список пакетов с именами пакетов в ``TABLE_CAT``.
* ``getFunctions``, ``getFunctionColumns``, ``getProcedures`` и ``getProcedureColumns`` включают информацию о процедурах или функциях в пакетах:

	* В столбцах ``FUNCTION_CAT/PROCEDURE_CAT`` будут представлены данные:

		* Для пакетных процедур и функций - имя пакета;
		* Для обычных (непакетных) процедур и функций - пустая строка вместо ``null`` (из-за следующего правила).

	* Если параметр ``catalog`` имеет значение пустой строки, в отчет попадают только обычные хранимые процедуры и функции.
	* Если параметр ``catalog`` равен ``null``, в отчет попадают как пакетные, так и обычные хранимые процедуры и функции.
	* Для других значений параметра ``catalog`` эти методы будут возвращать только процедуры, функции и их столбцы указанного пакета (точное совпадение, чувствительное к регистру; не шаблон ``LIKE``).
	* Для обычных процедур и функций столбец ``SPECIFIC_NAME`` представляет собой имя функции или процедуры без кавычек, а для пакетных процедур и функций - ``имя пакета в кавычках + '.' + имя процесса в кавычках`` (например, ``«SOME_PACKAGE»``. ``«SOME_FUNCTION»``).

* ``getCatalogSeparator()`` возвращает ``«.»`` (строку с точкой).
* ``getCatalogTerm()`` возвращает ``«PACKAGE»``.
* ``isCatalogAtStart()`` возвращает ``true``.
* ``getMaxCatalogNameLength()`` возвращает 31 или 63 в зависимости от максимальной длины идентификатора в базе данных.
* ``supportsCatalogsInDataManipulation()`` возвращает ``true`` (т.е. доступ к селективным хранимым процедурам и функциям из пакетов).
* ``supportsCatalogsInProcedureCalls()`` возвращает ``true``.
* Остальные методы ``supportsCatalogsIntype()`` по-прежнему возвращают ``false``.
* Другие методы метаданных с параметром ``catalog`` продолжают игнорировать его, как и при отключенном ``useCatalogAsPackage``.

Свойство ``useCatalogAsPackage`` не вызывает никакого другого поведения.

Это нестандартное поведение, и стандартные инструменты или библиотеки ``JDBC`` могут работать некорректно, когда это свойство включено.
Оно может быть отключено и удалено в будущем.

Информационные свойства для клиента
----------------------------------------

Информационные свойства для клиента позволяют задавать свойства соединения в информационных целях, или,
как говорится в документации ``JDBC API``, ``«используются только для учета, диагностики и отладки»``.

















