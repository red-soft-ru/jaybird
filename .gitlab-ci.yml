stages:
- prepare
- build_and_test
- deploy

cache:
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  paths:
    - .m2/repository/
    - target/

variables:
  RELEASE_HUB_PROJECT: jaybird
  CI_URL: ${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}
  TAG_BRANCH: master
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode -U"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  RDB3_VERSION: "3.0.9"
  RDB5_VERSION: "5.0.0-SNAPSHOT.692"
  http_proxy: http://git.red-soft.biz:3128
  https_proxy: http://git.red-soft.biz:3128
  no_proxy: localhost,172.0.0.0/8,127.0.0.0/8,.red-soft.biz

.prepare_template: &prepare_template
  tags:
    - docker
    - builder
  stage: prepare
  image: openjdk:8-jdk-alpine
  script:
    - mkdir .ci
    - echo ${VERSION} > .ci/version
    - echo ${BRANCH} > .ci/branch
    - echo ${CONTEXT} > .ci/context
    - mvn $MAVEN_CLI_OPTS releasehub-build:register -Pdeploy-internal -DreleaseHubBuildOnlyCreate -DreleaseHubBuildVersion=$VERSION -DreleaseHubBuildContext=${CONTEXT} -DreleaseHubBuildBranch=${BRANCH} -DreleaseHubBuildCommit=${CI_COMMIT_SHA} -DreleaseHubBuildCIURL=${CI_URL}
  artifacts:
    expire_in: 1 day
    paths:
      - .ci/

prepare:snapshot:
  <<: *prepare_template
  before_script:
    - apk --update add maven
    - REAL_VERSION=$(mvn $MAVEN_CLI_OPTS -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec)
    - VERSION=$(mvn $MAVEN_CLI_OPTS -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec|sed 's/\(.*\)-.*/\1/')
    - "[ \"$REAL_VERSION\" = \"${VERSION}-SNAPSHOT\" ] || (echo Stopping build. Expected ${VERSION}-SNAPSHOT version. Create tag for this commit!; exit 1)"
    - export BUILDNO=$(mvn $MAVEN_CLI_OPTS -q --non-recursive releasehub-build:buildno -Pdeploy-internal -DreleaseHubBuildVersion=${VERSION}-SNAPSHOT)
    - export VERSION=${VERSION}-SNAPSHOT.${BUILDNO}
    - export BRANCH=${CI_COMMIT_REF_NAME}
    - export CONTEXT=commit
  except:
    - tags

prepare:release:
  <<: *prepare_template
  before_script:
    - apk --update add maven
    - VERSION_IN_POM=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec)
    - export VERSION=$(echo ${CI_COMMIT_TAG}|sed 's/v//')
    - export BRANCH=${TAG_BRANCH}
    - export CONTEXT=tag
    - "[ \"$VERSION\" = \"$VERSION_IN_POM\" ] || (echo Project version in pom.xml and tag do not match!; exit 1)"
  only:
    - tags

.deploy_template: &deploy_template
  image:
    name: openjdk:11-jdk-buster
    entrypoint: []
  tags:
    - docker
    - builder
  stage: deploy
  before_script:
    - export VERSION=`cat .ci/version`
    - export BRANCH=`cat .ci/branch`
    - export CONTEXT=`cat .ci/context`
    - apt update -y && apt install maven -y

build_and_test:
  tags:
    - docker
    - tester
  stage: build_and_test
  variables:
    JAVA_HOME: /usr/java11
  image:
    name: registry.red-soft.biz:5000/docker-images/rdbbuildenv:rdb4-3
  before_script:
    - |
      if [[ "${RDB_VERSION:0:1}" -eq "5" ]]; then
        export RDB_MAJOR_VERSION="5"
        export REPORT_PREFIX=rdb5_${REPORT_PREFIX}
      elif [[ "${RDB_VERSION:0:1}" -eq "4" ]]; then
        export RDB_MAJOR_VERSION="4"
        export REPORT_PREFIX=rdb4_${REPORT_PREFIX}
      elif [[ "${RDB_VERSION:0:1}" -eq "3" ]]; then
        export RDB_MAJOR_VERSION="3"
        export REPORT_PREFIX=rdb3_${REPORT_PREFIX}
        export EXTRA_DEPENDENCIES="$EXTRA_DEPENDENCIES"
      else
        die "Do not know how to test RDB ${RDB_VERSION}"
      fi
    - |
      cat << EOF > /etc/yum.repos.d/bellsoft.repo
      [BellSoft]
      name=BellSoft Repository
      baseurl=https://yum.bell-sw.com
      enabled=1
      gpgcheck=1
      gpgkey=https://download.bell-sw.com/pki/GPG-KEY-bellsoft
      priority=1
      EOF
    - echo proxy=$http_proxy >> /etc/yum.conf
    - yum install -y maven krb5-server krb5-workstation expect java-11-openjdk $EXTRA_DEPENDENCIES
    - yum install -y https://dl.min.io/client/mc/release/linux-amd64/archive/mcli-20210613174822.0.0.x86_64.rpm
    - /opt/cprocsp/sbin/amd64/cpconfig -license -set $LICENSE_CRYPTOPRO4
    - ./ci/configure_kerberos.sh
    - export VERSION=`cat .ci/version`
    - ln -s `update-alternatives --display jre_11_openjdk | sed -n '2p;3q' | awk -F\" '{split($1, v, " ");printf("%s", v[5])}'` /usr/java11
  script:
    - ./ci/test.sh
  parallel:
    matrix:
      - TYPE: JDK11
        TEST_JAVA_JVM: /usr/java11/bin/java
        GDS_TYPE: "PURE_JAVA"
        RDB_VERSION: [ $RDB3_VERSION, $RDB4_VERSION, $RDB5_VERSION ]
      - TYPE: JDK11_fboonative_only
        TEST_JAVA_JVM: /usr/java11/bin/java
        GDS_TYPE: "FBOONATIVE"
        REPORT_PREFIX: jdk11_fboonative_
        RDB_VERSION: [ $RDB4_VERSION, $RDB5_VERSION ]
      - TYPE: JDK11_native_only
        TEST_JAVA_JVM: /usr/java11/bin/java
        GDS_TYPE: "NATIVE"
        REPORT_PREFIX: jdk11_native_
        RDB_VERSION: [ $RDB4_VERSION, $RDB5_VERSION ]
      - TYPE: JDK11_fbooembedded_only
        TEST_JAVA_JVM: /usr/java11/bin/java
        GDS_TYPE: "FBOOEMBEDDED"
        REPORT_PREFIX: jdk11_fbooembedded_
        RDB_VERSION: [ $RDB4_VERSION, $RDB5_VERSION ]
      - TYPE: JDK11_embedded_only
        TEST_JAVA_JVM: /usr/java11/bin/java
        GDS_TYPE: "EMBEDDED"
        REPORT_PREFIX: jdk11_embedded_
        RDB_VERSION: [ $RDB4_VERSION, $RDB5_VERSION ]
      - TYPE: JDK11_rdb3_liberica_11
        TEST_JAVA_JVM: /usr/lib/jvm/bellsoft-java11-runtime.x86_64/bin/java
        JDK_VER: 11-runtime
        GDS_TYPE: "PURE_JAVA"
        EXTRA_DEPENDENCIES: bellsoft-java11-runtime
        REPORT_PREFIX: liberica_jdk11_
        RDB_VERSION: $RDB3_VERSION

deploy:internal:
  <<: *deploy_template
  stage: deploy
  script:
    - mvn $MAVEN_CLI_OPTS deploy -Pdeploy-internal -Dmaven.test.skip.exec -DreleaseHubBuildVersion=$VERSION
    - mvn $MAVEN_CLI_OPTS --non-recursive releasehub-build:publish -Pdeploy-internal -DreleaseHubBuildVersion=$VERSION
    - mvn $MAVEN_CLI_OPTS deploy -Pdeploy-nexus-snapshots -Dmaven.test.skip.exec

deploy:nexus_releases:
  <<: *deploy_template
  stage: deploy
  script:
    - mvn $MAVEN_CLI_OPTS deploy -Pdeploy-nexus-releases -Dmaven.test.skip.exec
  only:
    - tags
